#include <vector>
#include <algorithm>
#include <utility>
#include <algorithm>

using namespace std;

/*
 
 Key: Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.
 
 This happens if a non-infected node is reachable from more than one infected one.
 
 That is, we need to find the largest set of non-infected nodes that are reachable
 from only and only one infected node.
 
 To do so we proceed:
 
 - uniond find all the nodes.
 - count the size of each set
 - count how many malwares are in each set
 - return the malware from the set such that it's the only one infected and has
    the largest size.
 - Other wise, return the smallest index of the malware.
 
 Complexity:
 
 - Time: O(N^2)
 - Space: O(N)
 
 */

class Solution
{
public:
    
    vector<int> size;
    vector<int> parent;
    
    int find(int x)
    {
        if (parent[x] == -1)
            return x;
        
        return parent[x] = find(parent[x]);
    }
    
    void unite(int f_a, int f_b)
    {
        if (size[f_a] < size[f_b])
            swap(f_a, f_b);
        
        size[f_a] += size[f_b];
        parent[f_b] = f_a;
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial)
    {
        int N = graph.size();
        
        size.resize(N, 0);
        parent.resize(N, -1);
        
        for (int u = 0; u != N; ++u)
            for (int v = u+1; v != N; ++v)
                if (graph[u][v])
                {
                    int f_u = find(u);
                    int f_v = find(v);
                    
                    if (f_u != f_v)
                        unite(f_u, f_v);
                }
        
        vector<int> set_size(N, 0);
        vector<int> malwares_in_set(N, 0);
        
        for (int u = 0; u != N; ++u)
            set_size[find(u)]++;
        
        for (auto m : initial)
            malwares_in_set[find(m)]++;
        
        pair<int, int> ans = {1, 0};
        for (int m : initial)
            ans = min(ans, {(malwares_in_set[find(m)] == 1) * -set_size[find(m)], m});
        
        
        return ans.second;
    }
};
